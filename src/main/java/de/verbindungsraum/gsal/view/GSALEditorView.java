/**
 *
 * Copyright (c) 2013.10.04
 * M-net Telekommunikations GmbH
 * 
 * @author nixdorfan
 * Java-JDK : Java(TM) SE Runtime Environment 1.7.0_04-b22
 * 
 */

package de.verbindungsraum.gsal.view;

//~--- non-JDK imports --------------------------------------------------------

import de.bite.framework.constants.Constants;
import de.bite.framework.context.extension.impl.ContextStatus;
import de.bite.framework.context.extension.impl.ContextType;
import de.bite.framework.context.IContext;
import de.bite.framework.utilities.file.FileHandler;
import de.bite.framework.utilities.swing.PopUpper;
import de.bite.framework.utilities.system.SystemInformation;

import de.verbindungsraum.gsal.command.impl.GeneratingTreeCommand;
import de.verbindungsraum.gsal.exception.GSALCommandException;
import de.verbindungsraum.gsal.exception.GSALException;

//~--- JDK imports ------------------------------------------------------------

import java.io.File;
import java.io.FileWriter;

import javax.swing.JFileChooser;
import javax.swing.JTree;
import javax.swing.tree.TreePath;

//~--- classes ----------------------------------------------------------------

/**
 *
 * @author nixdorfan
 */
public class GSALEditorView extends javax.swing.JFrame
{

  //~--- fields ---------------------------------------------------------------

  private IContext                context;

  // Variables declaration - do not modify
  private javax.swing.JButton     jButton1;
  private javax.swing.JButton     jButton2;
  private javax.swing.JButton     jButton3;
  private javax.swing.JButton     jButton4;
  private javax.swing.JButton     jButton5;
  private javax.swing.JEditorPane jEditorPane1;
  private javax.swing.JPanel      jPanel1;
  private javax.swing.JPanel      jPanel2;
  private javax.swing.JPanel      jPanel3;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane5;

  //~--- constructors ---------------------------------------------------------

  /**
   *
   * @param context IContext
   */
  public GSALEditorView(IContext context)
  {
    initComponents();

    this.context = context;

    PopUpper pop = new PopUpper();

    pop.setVars(this);
    this.context.setObject(ContextStatus.AKTIV, pop, "popupper", null);
    this.context.setObject(ContextStatus.AKTIV, this.jEditorPane1, "editorpane", null);

    GSALFileHandler filehandler = new GSALFileHandler(this.context);

    this.context.setObject(ContextStatus.AKTIV, filehandler, "filehandler", null);
  }




  //~--- methods --------------------------------------------------------------

  /*
   * Eigene Methoden -- Erhalte TreePath-String dynamischer Tiefe
   */

  /**
   *
   * @param treepath TreePath
   *
   * @return String
   */
  private String getPathFromTreePath(TreePath treepath)
  {
    try
    {
      int    lengthOfTreePath         = treepath.getPath().length;
      String returnTreePathObjectName = treepath.getPath()[lengthOfTreePath - 1] + "";

      return returnTreePathObjectName;
    }
    catch(Exception ex)
    {
      PopUpper pop = (PopUpper)this.context.getObject("popupper", ContextType.NEW, null);

      pop.showPopUp("Bitte vor Markierung File im Dateienbaum markieren");

      return null;
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")

  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents()
  {

    jPanel1      = new javax.swing.JPanel();
    jPanel2      = new javax.swing.JPanel();
    jButton1     = new javax.swing.JButton();
    jButton2     = new javax.swing.JButton();
    jButton3     = new javax.swing.JButton();
    jButton4     = new javax.swing.JButton();
    jButton5     = new javax.swing.JButton();
    jPanel3      = new javax.swing.JPanel();
    jScrollPane5 = new javax.swing.JScrollPane();
    jEditorPane1 = new javax.swing.JEditorPane();
    jScrollPane2 = new javax.swing.JScrollPane();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("GSAL EditorView 1.0");
    jPanel1.setLayout(new java.awt.BorderLayout());
    jPanel2.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel2.setLayout(new java.awt.GridLayout(5, 1, 5, 0));
    jButton1.setFont(new java.awt.Font("Arial", 0, 10));    // NOI18N
    jButton1.setText("Neu");
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });
    jPanel2.add(jButton1);
    jButton2.setFont(new java.awt.Font("Arial", 0, 10));    // NOI18N
    jButton2.setText("Speichern");
    jButton2.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton2ActionPerformed(evt);
      }
    });
    jPanel2.add(jButton2);
    jButton3.setFont(new java.awt.Font("Arial", 0, 10));    // NOI18N
    jButton3.setText("Kopieren");
    jButton3.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton3ActionPerformed(evt);
      }
    });
    jPanel2.add(jButton3);
    jButton4.setFont(new java.awt.Font("Arial", 0, 10));    // NOI18N
    jButton4.setText("LÃ¶schen");
    jButton4.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton4ActionPerformed(evt);
      }
    });
    jPanel2.add(jButton4);
    jButton5.setFont(new java.awt.Font("Arial", 0, 10));    // NOI18N
    jButton5.setText("Lade Config");
    jButton5.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton5ActionPerformed(evt);
      }
    });
    jPanel2.add(jButton5);
    jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);
    jPanel3.setPreferredSize(new java.awt.Dimension(600, 200));
    jPanel3.setLayout(new java.awt.BorderLayout());
    jScrollPane5.setPreferredSize(new java.awt.Dimension(600, 324));
    jEditorPane1.setFont(new java.awt.Font("Arial", 0, 10));    // NOI18N
    jScrollPane5.setViewportView(jEditorPane1);
    jPanel3.add(jScrollPane5, java.awt.BorderLayout.CENTER);
    jPanel3.add(jScrollPane2, java.awt.BorderLayout.WEST);
    jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);
    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    pack();

  }    // </editor-fold>

  /**
   *
   * @param evt java.awt.event.ActionEvent
   */
  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
  {

//  JTree jTree = (JTree)this.context.getObject("modtree", ContextType.USED, null); 
//   String selectionName = this.getPathFromTreePath( jTree.getSelectionPath() );
    GSALFileHandler filehandler = (GSALFileHandler)this.context.getObject("filehandler", ContextType.USED, null);

    filehandler.load("new");
    filehandler.setVisible(true);
    filehandler.pack();
  }

  /**
   *
   * @param evt java.awt.event.ActionEvent
   */
  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)
  {

    JTree  jTree         = (JTree)this.context.getObject("modtree", ContextType.USED, null);
    String selectionName = this.getPathFromTreePath(jTree.getSelectionPath());
    String path          = (String)this.context.getObject("pathtree", ContextType.NEW, null);
    String pathToFile    = path + SystemInformation.getFileSeparator() + selectionName;

    try
    {
      FileWriter writer = new FileWriter(new File(pathToFile));

      writer.write(jEditorPane1.getText());
      writer.flush();
    }
    catch(Exception ex)
    {
      this.context.getLogger().error("Fehler beim Speichern des aktuellen Files " + ex);

      PopUpper popException = (PopUpper)this.context.getObject("popupper", ContextType.USED, null);

      popException.showPopUp("Fehler beim Speichern des aktuellen Files ");
    }

  }

  /**
   *
   * @param evt java.awt.event.ActionEvent
   */
  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)
  {
    JTree           jTree         = (JTree)this.context.getObject("modtree", ContextType.USED, null);
    String          selectionName = this.getPathFromTreePath(jTree.getSelectionPath());
    GSALFileHandler filehandler   = (GSALFileHandler)this.context.getObject("filehandler", ContextType.USED, null);

    filehandler.load("copy");
    filehandler.setVisible(true);
    filehandler.pack();

    // String path = (String)this.context.getObject("pathtree", ContextType.NEW, null);
    // String pathToFile = path + SystemInformation.getFileSeparator() + selectionName;
    // JEditorPane editorpane = (JEditorPane)this.context.getObject("editorpane", ContextType.USED, null);
    // editorpane.set.Text(FileUtilsAN.readBuffered(pathToFile));
  }

  /**
   *
   * @param evt java.awt.event.ActionEvent
   */
  private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)
  {

    JTree  jTree         = (JTree)this.context.getObject("modtree", ContextType.USED, null);
    String selectionName = this.getPathFromTreePath(jTree.getSelectionPath());
    String path          = (String)this.context.getObject("pathtree", ContextType.NEW, null);
    String pathToFile    = path + SystemInformation.getFileSeparator() + selectionName;

    new FileHandler().deleteOneFile(pathToFile);

    try
    {
      GeneratingTreeCommand treeCommand = (GeneratingTreeCommand)context.getObject("treecommand", ContextType.USED, null);

      treeCommand.execute();
    }
    catch(GSALException ex)
    {
      this.context.getLogger().error("Fehler beim Aufbau des aktualisierten Dateienbaumes " + ex);

      PopUpper popException = (PopUpper)this.context.getObject("popupper", ContextType.USED, null);

      popException.showPopUp("Fehler beim Aufbau des aktualisierten Dateienbaumes ");
    }

  }

  // Laden des Editor-Contexts

  /**
   *
   * @param evt java.awt.event.ActionEvent
   */
  private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)
  {

    JFileChooser fileChooser = new JFileChooser();

    fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    fileChooser.setVisible(true);

    int returnVal = fileChooser.showOpenDialog(jButton5);

    if(returnVal == JFileChooser.APPROVE_OPTION)
    {
      String filePath = fileChooser.getSelectedFile().toString();

      this.context.setObject(ContextStatus.AKTIV, filePath, "pathtree", null);

      GeneratingTreeCommand treeCommand = (GeneratingTreeCommand)GeneratingTreeCommand.getInstance();

      treeCommand.setContext(context);
      treeCommand.setGUIInforamtion(this.jScrollPane2);
      treeCommand.setCommandString(filePath);
      this.context.setObject(ContextStatus.AKTIV, treeCommand, "treecommand", null);

      try
      {
        treeCommand.execute();
        this.jScrollPane2.getParent().setVisible(true);
        pack();
      }
      catch(GSALCommandException ex)
      {
        this.context.getLogger().error(Constants.error_message + " Command executing generating Tree " + ex.getLocalizedMessage());
      }
    }

  }

  // End of variables declaration
}


/* ||\
 * ---------------------------------------------------------
 */
